layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

#include<descriptions.glsl>

layout (std430) readonly buffer ssbo_meshesBuffer { MeshDescription meshes[]; };
layout (std430) readonly buffer ssbo_pointLightsBuffer {
	LightBufferReservedData pointLightsBufferReservedData;
	PointLightDescription pointLights[];
};
layout (std430) readonly buffer ssbo_spotLightsBuffer {
	LightBufferReservedData spotLightsBufferReservedData;
	SpotLightDescription spotLights[];
};
layout (std430) readonly buffer ssbo_directionalLightsBuffer {
	LightBufferReservedData directionalLightsBufferReservedData;
	DirectionalLightDescription directionalLights[];
};
layout (std430) readonly buffer ssbo_imageBasedLightsBuffer {
	LightBufferReservedData imageBasedLightsBufferReservedData;
	ImageBasedLightDescription imageBasedLights[];
};
layout (std430) buffer ssbo_commandsBuffer {
	DrawIndirectCommandsBufferReservedData lightsIndirectCommandsBufferReservedData;
	DrawArraysIndirectCommand lightsCommands[];
};

void main(void)
{
	uint totalLightsCount =
		pointLightsBufferReservedData.count +
		spotLightsBufferReservedData.count +
		directionalLightsBufferReservedData.count +
		imageBasedLightsBufferReservedData.count;
	
    uint lightID = gl_GlobalInvocationID.x;
	if (lightID < totalLightsCount)
	{
		MeshDescription meshDescription;

		if (lightID < pointLightsBufferReservedData.count)
		{
			meshDescription = meshes[pointLightsBufferReservedData.areaMeshID];
		}
		else if ((lightID -= pointLightsBufferReservedData.count) < spotLightsBufferReservedData.count)
		{
			meshDescription = meshes[spotLightsBufferReservedData.areaMeshID];
		}
		else if ((lightID -= spotLightsBufferReservedData.count) < directionalLightsBufferReservedData.count)
		{
			meshDescription = meshes[directionalLightsBufferReservedData.areaMeshID];
		}
		else if ((lightID -= directionalLightsBufferReservedData.count) < imageBasedLightsBufferReservedData.count)
		{
			meshDescription = meshes[imageBasedLightsBufferReservedData.areaMeshID];
		}

		uint commandID = atomicAdd(lightsIndirectCommandsBufferReservedData.count, 1u);
		lightsCommands[commandID] = DrawArraysIndirectCommand(
			meshNumElements(meshDescription),
			1u,
			meshDescription.elementsOffset,
			lightID);
	}

}